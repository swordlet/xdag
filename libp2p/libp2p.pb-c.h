/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: libp2p.proto */

#ifndef PROTOBUF_C_libp2p_2eproto__INCLUDED
#define PROTOBUF_C_libp2p_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Xdag__Request Xdag__Request;
typedef struct _Xdag__Response Xdag__Response;
typedef struct _Xdag__IdentifyResponse Xdag__IdentifyResponse;
typedef struct _Xdag__ConnectRequest Xdag__ConnectRequest;
typedef struct _Xdag__StreamOpenRequest Xdag__StreamOpenRequest;
typedef struct _Xdag__StreamHandlerRequest Xdag__StreamHandlerRequest;
typedef struct _Xdag__ErrorResponse Xdag__ErrorResponse;
typedef struct _Xdag__StreamInfo Xdag__StreamInfo;
typedef struct _Xdag__DHTRequest Xdag__DHTRequest;
typedef struct _Xdag__DHTResponse Xdag__DHTResponse;
typedef struct _Xdag__PeerInfo Xdag__PeerInfo;
typedef struct _Xdag__ConnManagerRequest Xdag__ConnManagerRequest;
typedef struct _Xdag__DisconnectRequest Xdag__DisconnectRequest;
typedef struct _Xdag__PSRequest Xdag__PSRequest;
typedef struct _Xdag__PSMessage Xdag__PSMessage;
typedef struct _Xdag__PSResponse Xdag__PSResponse;


/* --- enums --- */

typedef enum _Xdag__Request__Type {
  XDAG__REQUEST__TYPE__IDENTIFY = 0,
  XDAG__REQUEST__TYPE__CONNECT = 1,
  XDAG__REQUEST__TYPE__STREAM_OPEN = 2,
  XDAG__REQUEST__TYPE__STREAM_HANDLER = 3,
  XDAG__REQUEST__TYPE__DHT = 4,
  XDAG__REQUEST__TYPE__LIST_PEERS = 5,
  XDAG__REQUEST__TYPE__CONNMANAGER = 6,
  XDAG__REQUEST__TYPE__DISCONNECT = 7,
  XDAG__REQUEST__TYPE__PUBSUB = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(XDAG__REQUEST__TYPE)
} Xdag__Request__Type;
typedef enum _Xdag__Response__Type {
  XDAG__RESPONSE__TYPE__OK = 0,
  XDAG__RESPONSE__TYPE__ERROR = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(XDAG__RESPONSE__TYPE)
} Xdag__Response__Type;
typedef enum _Xdag__DHTRequest__Type {
  XDAG__DHTREQUEST__TYPE__FIND_PEER = 0,
  XDAG__DHTREQUEST__TYPE__FIND_PEERS_CONNECTED_TO_PEER = 1,
  XDAG__DHTREQUEST__TYPE__FIND_PROVIDERS = 2,
  XDAG__DHTREQUEST__TYPE__GET_CLOSEST_PEERS = 3,
  XDAG__DHTREQUEST__TYPE__GET_PUBLIC_KEY = 4,
  XDAG__DHTREQUEST__TYPE__GET_VALUE = 5,
  XDAG__DHTREQUEST__TYPE__SEARCH_VALUE = 6,
  XDAG__DHTREQUEST__TYPE__PUT_VALUE = 7,
  XDAG__DHTREQUEST__TYPE__PROVIDE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(XDAG__DHTREQUEST__TYPE)
} Xdag__DHTRequest__Type;
typedef enum _Xdag__DHTResponse__Type {
  XDAG__DHTRESPONSE__TYPE__BEGIN = 0,
  XDAG__DHTRESPONSE__TYPE__VALUE = 1,
  XDAG__DHTRESPONSE__TYPE__END = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(XDAG__DHTRESPONSE__TYPE)
} Xdag__DHTResponse__Type;
typedef enum _Xdag__ConnManagerRequest__Type {
  XDAG__CONN_MANAGER_REQUEST__TYPE__TAG_PEER = 0,
  XDAG__CONN_MANAGER_REQUEST__TYPE__UNTAG_PEER = 1,
  XDAG__CONN_MANAGER_REQUEST__TYPE__TRIM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(XDAG__CONN_MANAGER_REQUEST__TYPE)
} Xdag__ConnManagerRequest__Type;
typedef enum _Xdag__PSRequest__Type {
  XDAG__PSREQUEST__TYPE__GET_TOPICS = 0,
  XDAG__PSREQUEST__TYPE__LIST_PEERS = 1,
  XDAG__PSREQUEST__TYPE__PUBLISH = 2,
  XDAG__PSREQUEST__TYPE__SUBSCRIBE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(XDAG__PSREQUEST__TYPE)
} Xdag__PSRequest__Type;

/* --- messages --- */

struct  _Xdag__Request
{
  ProtobufCMessage base;
  Xdag__Request__Type type;
  Xdag__ConnectRequest *connect;
  Xdag__StreamOpenRequest *streamopen;
  Xdag__StreamHandlerRequest *streamhandler;
  Xdag__DHTRequest *dht;
  Xdag__ConnManagerRequest *connmanager;
  Xdag__DisconnectRequest *disconnect;
  Xdag__PSRequest *pubsub;
};
#define XDAG__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__request__descriptor) \
    , XDAG__REQUEST__TYPE__IDENTIFY, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Xdag__Response
{
  ProtobufCMessage base;
  Xdag__Response__Type type;
  Xdag__ErrorResponse *error;
  Xdag__StreamInfo *streaminfo;
  Xdag__IdentifyResponse *identify;
  Xdag__DHTResponse *dht;
  size_t n_peers;
  Xdag__PeerInfo **peers;
  Xdag__PSResponse *pubsub;
};
#define XDAG__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__response__descriptor) \
    , XDAG__RESPONSE__TYPE__OK, NULL, NULL, NULL, NULL, 0,NULL, NULL }


struct  _Xdag__IdentifyResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  size_t n_addrs;
  ProtobufCBinaryData *addrs;
};
#define XDAG__IDENTIFY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__identify_response__descriptor) \
    , {0,NULL}, 0,NULL }


struct  _Xdag__ConnectRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData peer;
  size_t n_addrs;
  ProtobufCBinaryData *addrs;
  protobuf_c_boolean has_timeout;
  int64_t timeout;
};
#define XDAG__CONNECT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__connect_request__descriptor) \
    , {0,NULL}, 0,NULL, 0, 0 }


struct  _Xdag__StreamOpenRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData peer;
  size_t n_proto;
  char **proto;
  protobuf_c_boolean has_timeout;
  int64_t timeout;
};
#define XDAG__STREAM_OPEN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__stream_open_request__descriptor) \
    , {0,NULL}, 0,NULL, 0, 0 }


struct  _Xdag__StreamHandlerRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData addr;
  size_t n_proto;
  char **proto;
};
#define XDAG__STREAM_HANDLER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__stream_handler_request__descriptor) \
    , {0,NULL}, 0,NULL }


struct  _Xdag__ErrorResponse
{
  ProtobufCMessage base;
  char *msg;
};
#define XDAG__ERROR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__error_response__descriptor) \
    , NULL }


struct  _Xdag__StreamInfo
{
  ProtobufCMessage base;
  ProtobufCBinaryData peer;
  ProtobufCBinaryData addr;
  char *proto;
};
#define XDAG__STREAM_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__stream_info__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


struct  _Xdag__DHTRequest
{
  ProtobufCMessage base;
  Xdag__DHTRequest__Type type;
  protobuf_c_boolean has_peer;
  ProtobufCBinaryData peer;
  protobuf_c_boolean has_cid;
  ProtobufCBinaryData cid;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
  protobuf_c_boolean has_count;
  int32_t count;
  protobuf_c_boolean has_timeout;
  int64_t timeout;
};
#define XDAG__DHTREQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__dhtrequest__descriptor) \
    , XDAG__DHTREQUEST__TYPE__FIND_PEER, 0, {0,NULL}, 0, {0,NULL}, 0, {0,NULL}, 0, {0,NULL}, 0, 0, 0, 0 }


struct  _Xdag__DHTResponse
{
  ProtobufCMessage base;
  Xdag__DHTResponse__Type type;
  Xdag__PeerInfo *peer;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define XDAG__DHTRESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__dhtresponse__descriptor) \
    , XDAG__DHTRESPONSE__TYPE__BEGIN, NULL, 0, {0,NULL} }


struct  _Xdag__PeerInfo
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  size_t n_addrs;
  ProtobufCBinaryData *addrs;
};
#define XDAG__PEER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__peer_info__descriptor) \
    , {0,NULL}, 0,NULL }


struct  _Xdag__ConnManagerRequest
{
  ProtobufCMessage base;
  Xdag__ConnManagerRequest__Type type;
  protobuf_c_boolean has_peer;
  ProtobufCBinaryData peer;
  char *tag;
  protobuf_c_boolean has_weight;
  int64_t weight;
};
#define XDAG__CONN_MANAGER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__conn_manager_request__descriptor) \
    , XDAG__CONN_MANAGER_REQUEST__TYPE__TAG_PEER, 0, {0,NULL}, NULL, 0, 0 }


struct  _Xdag__DisconnectRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData peer;
};
#define XDAG__DISCONNECT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__disconnect_request__descriptor) \
    , {0,NULL} }


struct  _Xdag__PSRequest
{
  ProtobufCMessage base;
  Xdag__PSRequest__Type type;
  char *topic;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define XDAG__PSREQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__psrequest__descriptor) \
    , XDAG__PSREQUEST__TYPE__GET_TOPICS, NULL, 0, {0,NULL} }


struct  _Xdag__PSMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_from;
  ProtobufCBinaryData from;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_seqno;
  ProtobufCBinaryData seqno;
  size_t n_topicids;
  char **topicids;
  protobuf_c_boolean has_signature;
  ProtobufCBinaryData signature;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
};
#define XDAG__PSMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__psmessage__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL}, 0, {0,NULL}, 0,NULL, 0, {0,NULL}, 0, {0,NULL} }


struct  _Xdag__PSResponse
{
  ProtobufCMessage base;
  size_t n_topics;
  char **topics;
  size_t n_peerids;
  ProtobufCBinaryData *peerids;
};
#define XDAG__PSRESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xdag__psresponse__descriptor) \
    , 0,NULL, 0,NULL }


/* Xdag__Request methods */
void   xdag__request__init
                     (Xdag__Request         *message);
size_t xdag__request__get_packed_size
                     (const Xdag__Request   *message);
size_t xdag__request__pack
                     (const Xdag__Request   *message,
                      uint8_t             *out);
size_t xdag__request__pack_to_buffer
                     (const Xdag__Request   *message,
                      ProtobufCBuffer     *buffer);
Xdag__Request *
       xdag__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__request__free_unpacked
                     (Xdag__Request *message,
                      ProtobufCAllocator *allocator);
/* Xdag__Response methods */
void   xdag__response__init
                     (Xdag__Response         *message);
size_t xdag__response__get_packed_size
                     (const Xdag__Response   *message);
size_t xdag__response__pack
                     (const Xdag__Response   *message,
                      uint8_t             *out);
size_t xdag__response__pack_to_buffer
                     (const Xdag__Response   *message,
                      ProtobufCBuffer     *buffer);
Xdag__Response *
       xdag__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__response__free_unpacked
                     (Xdag__Response *message,
                      ProtobufCAllocator *allocator);
/* Xdag__IdentifyResponse methods */
void   xdag__identify_response__init
                     (Xdag__IdentifyResponse         *message);
size_t xdag__identify_response__get_packed_size
                     (const Xdag__IdentifyResponse   *message);
size_t xdag__identify_response__pack
                     (const Xdag__IdentifyResponse   *message,
                      uint8_t             *out);
size_t xdag__identify_response__pack_to_buffer
                     (const Xdag__IdentifyResponse   *message,
                      ProtobufCBuffer     *buffer);
Xdag__IdentifyResponse *
       xdag__identify_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__identify_response__free_unpacked
                     (Xdag__IdentifyResponse *message,
                      ProtobufCAllocator *allocator);
/* Xdag__ConnectRequest methods */
void   xdag__connect_request__init
                     (Xdag__ConnectRequest         *message);
size_t xdag__connect_request__get_packed_size
                     (const Xdag__ConnectRequest   *message);
size_t xdag__connect_request__pack
                     (const Xdag__ConnectRequest   *message,
                      uint8_t             *out);
size_t xdag__connect_request__pack_to_buffer
                     (const Xdag__ConnectRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__ConnectRequest *
       xdag__connect_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__connect_request__free_unpacked
                     (Xdag__ConnectRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__StreamOpenRequest methods */
void   xdag__stream_open_request__init
                     (Xdag__StreamOpenRequest         *message);
size_t xdag__stream_open_request__get_packed_size
                     (const Xdag__StreamOpenRequest   *message);
size_t xdag__stream_open_request__pack
                     (const Xdag__StreamOpenRequest   *message,
                      uint8_t             *out);
size_t xdag__stream_open_request__pack_to_buffer
                     (const Xdag__StreamOpenRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__StreamOpenRequest *
       xdag__stream_open_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__stream_open_request__free_unpacked
                     (Xdag__StreamOpenRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__StreamHandlerRequest methods */
void   xdag__stream_handler_request__init
                     (Xdag__StreamHandlerRequest         *message);
size_t xdag__stream_handler_request__get_packed_size
                     (const Xdag__StreamHandlerRequest   *message);
size_t xdag__stream_handler_request__pack
                     (const Xdag__StreamHandlerRequest   *message,
                      uint8_t             *out);
size_t xdag__stream_handler_request__pack_to_buffer
                     (const Xdag__StreamHandlerRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__StreamHandlerRequest *
       xdag__stream_handler_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__stream_handler_request__free_unpacked
                     (Xdag__StreamHandlerRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__ErrorResponse methods */
void   xdag__error_response__init
                     (Xdag__ErrorResponse         *message);
size_t xdag__error_response__get_packed_size
                     (const Xdag__ErrorResponse   *message);
size_t xdag__error_response__pack
                     (const Xdag__ErrorResponse   *message,
                      uint8_t             *out);
size_t xdag__error_response__pack_to_buffer
                     (const Xdag__ErrorResponse   *message,
                      ProtobufCBuffer     *buffer);
Xdag__ErrorResponse *
       xdag__error_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__error_response__free_unpacked
                     (Xdag__ErrorResponse *message,
                      ProtobufCAllocator *allocator);
/* Xdag__StreamInfo methods */
void   xdag__stream_info__init
                     (Xdag__StreamInfo         *message);
size_t xdag__stream_info__get_packed_size
                     (const Xdag__StreamInfo   *message);
size_t xdag__stream_info__pack
                     (const Xdag__StreamInfo   *message,
                      uint8_t             *out);
size_t xdag__stream_info__pack_to_buffer
                     (const Xdag__StreamInfo   *message,
                      ProtobufCBuffer     *buffer);
Xdag__StreamInfo *
       xdag__stream_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__stream_info__free_unpacked
                     (Xdag__StreamInfo *message,
                      ProtobufCAllocator *allocator);
/* Xdag__DHTRequest methods */
void   xdag__dhtrequest__init
                     (Xdag__DHTRequest         *message);
size_t xdag__dhtrequest__get_packed_size
                     (const Xdag__DHTRequest   *message);
size_t xdag__dhtrequest__pack
                     (const Xdag__DHTRequest   *message,
                      uint8_t             *out);
size_t xdag__dhtrequest__pack_to_buffer
                     (const Xdag__DHTRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__DHTRequest *
       xdag__dhtrequest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__dhtrequest__free_unpacked
                     (Xdag__DHTRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__DHTResponse methods */
void   xdag__dhtresponse__init
                     (Xdag__DHTResponse         *message);
size_t xdag__dhtresponse__get_packed_size
                     (const Xdag__DHTResponse   *message);
size_t xdag__dhtresponse__pack
                     (const Xdag__DHTResponse   *message,
                      uint8_t             *out);
size_t xdag__dhtresponse__pack_to_buffer
                     (const Xdag__DHTResponse   *message,
                      ProtobufCBuffer     *buffer);
Xdag__DHTResponse *
       xdag__dhtresponse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__dhtresponse__free_unpacked
                     (Xdag__DHTResponse *message,
                      ProtobufCAllocator *allocator);
/* Xdag__PeerInfo methods */
void   xdag__peer_info__init
                     (Xdag__PeerInfo         *message);
size_t xdag__peer_info__get_packed_size
                     (const Xdag__PeerInfo   *message);
size_t xdag__peer_info__pack
                     (const Xdag__PeerInfo   *message,
                      uint8_t             *out);
size_t xdag__peer_info__pack_to_buffer
                     (const Xdag__PeerInfo   *message,
                      ProtobufCBuffer     *buffer);
Xdag__PeerInfo *
       xdag__peer_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__peer_info__free_unpacked
                     (Xdag__PeerInfo *message,
                      ProtobufCAllocator *allocator);
/* Xdag__ConnManagerRequest methods */
void   xdag__conn_manager_request__init
                     (Xdag__ConnManagerRequest         *message);
size_t xdag__conn_manager_request__get_packed_size
                     (const Xdag__ConnManagerRequest   *message);
size_t xdag__conn_manager_request__pack
                     (const Xdag__ConnManagerRequest   *message,
                      uint8_t             *out);
size_t xdag__conn_manager_request__pack_to_buffer
                     (const Xdag__ConnManagerRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__ConnManagerRequest *
       xdag__conn_manager_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__conn_manager_request__free_unpacked
                     (Xdag__ConnManagerRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__DisconnectRequest methods */
void   xdag__disconnect_request__init
                     (Xdag__DisconnectRequest         *message);
size_t xdag__disconnect_request__get_packed_size
                     (const Xdag__DisconnectRequest   *message);
size_t xdag__disconnect_request__pack
                     (const Xdag__DisconnectRequest   *message,
                      uint8_t             *out);
size_t xdag__disconnect_request__pack_to_buffer
                     (const Xdag__DisconnectRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__DisconnectRequest *
       xdag__disconnect_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__disconnect_request__free_unpacked
                     (Xdag__DisconnectRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__PSRequest methods */
void   xdag__psrequest__init
                     (Xdag__PSRequest         *message);
size_t xdag__psrequest__get_packed_size
                     (const Xdag__PSRequest   *message);
size_t xdag__psrequest__pack
                     (const Xdag__PSRequest   *message,
                      uint8_t             *out);
size_t xdag__psrequest__pack_to_buffer
                     (const Xdag__PSRequest   *message,
                      ProtobufCBuffer     *buffer);
Xdag__PSRequest *
       xdag__psrequest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__psrequest__free_unpacked
                     (Xdag__PSRequest *message,
                      ProtobufCAllocator *allocator);
/* Xdag__PSMessage methods */
void   xdag__psmessage__init
                     (Xdag__PSMessage         *message);
size_t xdag__psmessage__get_packed_size
                     (const Xdag__PSMessage   *message);
size_t xdag__psmessage__pack
                     (const Xdag__PSMessage   *message,
                      uint8_t             *out);
size_t xdag__psmessage__pack_to_buffer
                     (const Xdag__PSMessage   *message,
                      ProtobufCBuffer     *buffer);
Xdag__PSMessage *
       xdag__psmessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__psmessage__free_unpacked
                     (Xdag__PSMessage *message,
                      ProtobufCAllocator *allocator);
/* Xdag__PSResponse methods */
void   xdag__psresponse__init
                     (Xdag__PSResponse         *message);
size_t xdag__psresponse__get_packed_size
                     (const Xdag__PSResponse   *message);
size_t xdag__psresponse__pack
                     (const Xdag__PSResponse   *message,
                      uint8_t             *out);
size_t xdag__psresponse__pack_to_buffer
                     (const Xdag__PSResponse   *message,
                      ProtobufCBuffer     *buffer);
Xdag__PSResponse *
       xdag__psresponse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xdag__psresponse__free_unpacked
                     (Xdag__PSResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Xdag__Request_Closure)
                 (const Xdag__Request *message,
                  void *closure_data);
typedef void (*Xdag__Response_Closure)
                 (const Xdag__Response *message,
                  void *closure_data);
typedef void (*Xdag__IdentifyResponse_Closure)
                 (const Xdag__IdentifyResponse *message,
                  void *closure_data);
typedef void (*Xdag__ConnectRequest_Closure)
                 (const Xdag__ConnectRequest *message,
                  void *closure_data);
typedef void (*Xdag__StreamOpenRequest_Closure)
                 (const Xdag__StreamOpenRequest *message,
                  void *closure_data);
typedef void (*Xdag__StreamHandlerRequest_Closure)
                 (const Xdag__StreamHandlerRequest *message,
                  void *closure_data);
typedef void (*Xdag__ErrorResponse_Closure)
                 (const Xdag__ErrorResponse *message,
                  void *closure_data);
typedef void (*Xdag__StreamInfo_Closure)
                 (const Xdag__StreamInfo *message,
                  void *closure_data);
typedef void (*Xdag__DHTRequest_Closure)
                 (const Xdag__DHTRequest *message,
                  void *closure_data);
typedef void (*Xdag__DHTResponse_Closure)
                 (const Xdag__DHTResponse *message,
                  void *closure_data);
typedef void (*Xdag__PeerInfo_Closure)
                 (const Xdag__PeerInfo *message,
                  void *closure_data);
typedef void (*Xdag__ConnManagerRequest_Closure)
                 (const Xdag__ConnManagerRequest *message,
                  void *closure_data);
typedef void (*Xdag__DisconnectRequest_Closure)
                 (const Xdag__DisconnectRequest *message,
                  void *closure_data);
typedef void (*Xdag__PSRequest_Closure)
                 (const Xdag__PSRequest *message,
                  void *closure_data);
typedef void (*Xdag__PSMessage_Closure)
                 (const Xdag__PSMessage *message,
                  void *closure_data);
typedef void (*Xdag__PSResponse_Closure)
                 (const Xdag__PSResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor xdag__request__descriptor;
extern const ProtobufCEnumDescriptor    xdag__request__type__descriptor;
extern const ProtobufCMessageDescriptor xdag__response__descriptor;
extern const ProtobufCEnumDescriptor    xdag__response__type__descriptor;
extern const ProtobufCMessageDescriptor xdag__identify_response__descriptor;
extern const ProtobufCMessageDescriptor xdag__connect_request__descriptor;
extern const ProtobufCMessageDescriptor xdag__stream_open_request__descriptor;
extern const ProtobufCMessageDescriptor xdag__stream_handler_request__descriptor;
extern const ProtobufCMessageDescriptor xdag__error_response__descriptor;
extern const ProtobufCMessageDescriptor xdag__stream_info__descriptor;
extern const ProtobufCMessageDescriptor xdag__dhtrequest__descriptor;
extern const ProtobufCEnumDescriptor    xdag__dhtrequest__type__descriptor;
extern const ProtobufCMessageDescriptor xdag__dhtresponse__descriptor;
extern const ProtobufCEnumDescriptor    xdag__dhtresponse__type__descriptor;
extern const ProtobufCMessageDescriptor xdag__peer_info__descriptor;
extern const ProtobufCMessageDescriptor xdag__conn_manager_request__descriptor;
extern const ProtobufCEnumDescriptor    xdag__conn_manager_request__type__descriptor;
extern const ProtobufCMessageDescriptor xdag__disconnect_request__descriptor;
extern const ProtobufCMessageDescriptor xdag__psrequest__descriptor;
extern const ProtobufCEnumDescriptor    xdag__psrequest__type__descriptor;
extern const ProtobufCMessageDescriptor xdag__psmessage__descriptor;
extern const ProtobufCMessageDescriptor xdag__psresponse__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_libp2p_2eproto__INCLUDED */
